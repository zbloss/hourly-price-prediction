name: deploy to lambda
on:
  push:
    branches:
      - main

jobs:
  
  run_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f lambda_requirements.txt ]; then pip install -r lambda_requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        with:
          report_paths: 'junit/*.xml'


  build_zip_file:
    needs: run_tests
    name: build the lambda function zip file
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build AWS Lambda Zip File
        run: make build_zip
      - name: Uploading Zip
        uses: actions/upload-artifact@v2
        with:
          name: lambda_zip
          path: lambda-package.zip

  deploy:
    needs: build_zip_file
    name: deploy lambda function
    runs-on: ubuntu-latest
    steps:
    - name: Downloading Zip
      uses: actions/download-artifact@v2
      with:
        name: lambda_zip
    - name: AWS Lambda Deploy
      uses: appleboy/lambda-action@master
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_region: ${{ secrets.AWS_REGION }}
        function_name: eth-trader
        zip_file: lambda-package.zip
        dry_run: true
        environment: ASSET=${{ secrets.ASSET }},API_SECRET=${{ secrets.COINBASE_API_SECRET }},API_KEY=${{ secrets.COINBASE_API_KEY }},PASSPHRASE=${{ secrets.PASSPHRASE }},USE_SANDBOX=${{ secrets.USE_SANDBOX }},S3_BUCKET=${{ secrets.S3_BUCKET }},MODEL_NAME=${{ secrets.MODEL_NAME }},REGION_NAME=${{ secrets.REGION_NAME }}

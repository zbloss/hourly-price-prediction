name: deploy to lambda
on:
  push:
    branches:
      - main

jobs:
  
  # run_tests:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.8, 3.9]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install flake8 pytest pytest-cov
  #         if [ -f lambda_requirements.txt ]; then pip install -r lambda_requirements.txt; fi
  #     - name: Test with pytest
  #       run: |
  #         pytest --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

  #     - name: Publish Test Report
  #       uses: mikepenz/action-junit-report@v2
  #       with:
  #         report_paths: 'junit/*.xml'


  build_zip_file:
    name: build the lambda function zip file
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: AWS Authentication
        run: |
          aws configure set region ${{ secrets.AWS_REGION }} --profile default
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile default
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile default

      - name: Get Auth Credentials
        run: make get_auth_credentials

      - name: Assume IAM Role
        run: |
          aws configure set aws_access_key_id $(eval jq .Credentials.AccessKeyId credentials.json) --profile default
          aws configure set aws_secret_access_key $(eval jq .Credentials.SecretAccessKey credentials.json) --profile default
          aws configure set aws_session_token $(eval jq .Credentials.SessionToken credentials.json) --profile default
          cat ~/.aws/credentials
          export AWS_SECRET_ACCESS_KEY=$(eval jq .Credentials.SecretAccessKey credentials.json)
          export AWS_ACCESS_KEY_ID=$(eval jq .Credentials.AccessKeyId credentials.json)
          export AWS_SESSION_TOKEN=$(eval jq .Credentials.SessionToken credentials.json)
          
      - name: Build AWS Lambda Zip File
        run: make build_zip

      - name: Upload Zip to S3
        run: make upload_lambda_zip_to_s3

      - name: Update Lambda Function Code
        run: make deploy_lambda
      # - name: AWS Lambda Deploy
      #   uses: appleboy/lambda-action@master
      #   with:
      #     aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws_region: ${{ secrets.AWS_REGION }}
      #     function_name: eth-trader
      #     zip_file: lambda-package.zip
      #     dry_run: false
      #     memory_size: 128
      #     timeout: 180
      #     runtime: python3.8
      #     role: arn:aws:iam::193172378049:role/service-role/eth-trader-role-cc3rhfy8
      #     handler: lambda_function.lambda_handler
      #     environment: ASSET=${{ secrets.ASSET }},API_SECRET=${{ secrets.COINBASE_API_SECRET }},API_KEY=${{ secrets.COINBASE_API_KEY }},PASSPHRASE=${{ secrets.PASSPHRASE }},USE_SANDBOX=${{ secrets.USE_SANDBOX }},S3_BUCKET=${{ secrets.S3_BUCKET }},MODEL_NAME=${{ secrets.MODEL_NAME }},AWS_REGION=${{ secrets.AWS_REGION }}
